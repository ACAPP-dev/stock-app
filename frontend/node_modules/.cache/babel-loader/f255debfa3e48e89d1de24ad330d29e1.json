{"ast":null,"code":"function getDailyData(formData, watchlistObj, userId) {\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.chartStartDate) / 1000).toString();\n  const chartEndDate = (Date.parse(`${formData.chartEndDate}T22:00:00`) / 1000).toString();\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n\n  const readyChartData = chartData => {\n    if (chartData.t && chartData.t.length > 0) {\n      const newChartArry = chartData.t.map((date, index) => {\n        return {\n          date: date,\n          open: chartData.o[index],\n          high: chartData.h[index],\n          low: chartData.l[index],\n          close: chartData.c[index]\n        };\n      });\n      return newChartArry;\n    } else {\n      return chartData;\n    }\n  };\n\n  return dispatch => {\n    dispatch({\n      type: 'START_GET_DAILY_DATA'\n    });\n\n    const databaseFetch = dailyData => {\n      // Persist company and chart data to database\n      debugger;\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: userId,\n          watchlistId: formData.watchlistId,\n          data: dailyData\n        })\n      };\n      fetch('http://localhost:3000/daily', companyObject).then(resp => resp.json()).then(json => {\n        return dispatch({\n          type: 'ADD_DAILY_DATA',\n          payload: json\n        });\n      });\n    };\n\n    function fetchData(ticker) {\n      return fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        return makeCompanyObj(json);\n      });\n    }\n\n    function fetchChart(ticker) {\n      return fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        console.log('chart data: ', json);\n        return {\n          chartStartDate: chartStartDate,\n          chartEndDate: chartEndDate,\n          chartData: readyChartData(json)\n        };\n      });\n    }\n\n    const makeCompanyObj = companyData => {\n      return {\n        ticker: companyData.ticker,\n        name: companyData.name,\n        country: companyData.country,\n        exchange: companyData.exchange,\n        market_cap: companyData.marketCapitalization,\n        outstanding_shares: companyData.shareOutstanding,\n        web_url: companyData.weburl,\n        logo: companyData.logo,\n        industry: companyData.finnhubIndustry\n      };\n    };\n\n    async function chainedFetchData(p, ticker) {\n      const companyObj = await p;\n      const companyData = await fetchData(ticker);\n      const chartData = await fetchChart(ticker);\n      console.log(companyData);\n      console.log(chartData);\n      return { ...companyObj,\n        [ticker]: {\n          companyData: companyData,\n          chartData: chartData\n        }\n      };\n    } // const dailyDataObject = watchlistObj.companies\n    //     .map(company => company.ticker)\n    //     .reduce(chainedFetchData, Promise.resolve({}))\n    //     .then(dailyData => databaseFetch(dailyData))\n\n\n    watchlistObj.companies.map(company => company.ticker).reduce(chainedFetchData, Promise.resolve({})).then(dailyData => databaseFetch(dailyData));\n  };\n}\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","watchlistObj","userId","FINNHUB_BASIC_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","toString","chartEndDate","finnhubTimeframeUrl","readyChartData","chartData","t","length","newChartArry","map","date","index","open","o","high","h","low","l","close","c","dispatch","type","databaseFetch","dailyData","companyObject","method","headers","body","JSON","stringify","watchlistId","data","fetch","then","resp","json","payload","fetchData","ticker","makeCompanyObj","fetchChart","console","log","companyData","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","chainedFetchData","p","companyObj","companies","company","reduce","Promise","resolve"],"mappings":"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","sourcesContent":["function getDailyData(formData, watchlistObj, userId) {\n  \n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.chartStartDate)/1000).toString()\n    const chartEndDate = (Date.parse(`${formData.chartEndDate}T22:00:00`)/1000).toString()\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n\n    const readyChartData = (chartData) => {\n        if (chartData.t && chartData.t.length > 0) {\n            const newChartArry = chartData.t.map( (date, index) => {\n                return (\n                    {date: date,\n                    open: chartData.o[index],\n                    high: chartData.h[index],\n                    low: chartData.l[index],\n                    close: chartData.c[index]\n                    }\n                )\n            })\n            return newChartArry\n        } else {\n            return chartData\n        }\n    }\n\n    \n\n    return dispatch => {\n        dispatch({ type: 'START_GET_DAILY_DATA'})\n        \n        const databaseFetch = dailyData => {\n            // Persist company and chart data to database\n           debugger\n            const companyObject = {\n                method: 'POST',\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                body: JSON.stringify({userId: userId, watchlistId: formData.watchlistId, data: dailyData})\n            }\n    \n            fetch('http://localhost:3000/daily', companyObject)\n            .then(resp => resp.json())\n            .then(json => {\n                return dispatch({type: 'ADD_DAILY_DATA', payload: json})\n            })\n        }\n\n        \n\n        function fetchData(ticker) {\n            return fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                return makeCompanyObj(json)\n            })\n        }\n\n        function fetchChart(ticker) {\n            return fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('chart data: ', json)\n                return {\n                    chartStartDate: chartStartDate,\n                    chartEndDate: chartEndDate,\n                    chartData: readyChartData(json)\n                }\n            })\n        }\n\n        const makeCompanyObj = (companyData) => {\n            return {\n                ticker: companyData.ticker,\n                name: companyData.name,\n                country: companyData.country,\n                exchange: companyData.exchange,\n                market_cap: companyData.marketCapitalization,\n                outstanding_shares: companyData.shareOutstanding,\n                web_url: companyData.weburl,\n                logo: companyData.logo,\n                industry: companyData.finnhubIndustry\n            }  \n        }\n        \n\n        async function chainedFetchData(p, ticker) {\n            \n            const companyObj = await p\n            const companyData = await fetchData(ticker)\n            const chartData = await fetchChart(ticker)\n            console.log(companyData)\n            console.log(chartData)\n            return {...companyObj, [ticker]: {companyData: companyData, chartData: chartData}}\n    \n        }\n       \n        // const dailyDataObject = watchlistObj.companies\n        //     .map(company => company.ticker)\n        //     .reduce(chainedFetchData, Promise.resolve({}))\n        //     .then(dailyData => databaseFetch(dailyData))\n\n        watchlistObj.companies\n            .map(company => company.ticker)\n            .reduce(chainedFetchData, Promise.resolve({}))\n            .then(dailyData => databaseFetch(dailyData))\n    }\n}\n    export default getDailyData"]},"metadata":{},"sourceType":"module"}