{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/stocks-app/frontend/src/components/daily/DailyRows.js\";\nimport React from 'react';\n\nconst DailyRows = props => {\n  console.log('props in dailyrows: ', props);\n\n  const formatNumber = number => {\n    if (!number || Number.isNaN(number)) {\n      return '';\n    }\n\n    const numberArry = parseFloat(number).toFixed(2).split('.');\n    numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return numberArry.join('.');\n  };\n\n  const findChart = company => {\n    // debugger\n    return company.charts.find(chart => chart.chart_type === 'daily');\n  };\n\n  const getPriceData = chart => {\n    // Return object to use for the price data in the rows\n    const priceReturn = chart.chart_lines.slice(1).map((date, index) => {\n      const prevClose = chart.chart_lines[index].close;\n      return {\n        close: formatNumber(date.close),\n        dollarChg: formatNumber(date.close - prevClose),\n        percentChg: Math.round((date.close / prevClose - 1) * 10000) / 100\n      };\n    }); // debugger\n\n    return priceReturn;\n  };\n\n  const totalReturn = chart => {\n    const firstClose = chart.chart_lines[0].close;\n    const lastClose = chart.chart_lines[chart.chart_lines.length - 1].close;\n    return {\n      totalDollarChg: formatNumber(lastClose - firstClose),\n      totalPercentChg: Math.round((lastClose / firstClose - 1) * 10000) / 100\n    };\n  }; // Original Functionality based on store passed to props\n  // return props.daily.companies.map(company => {\n  //     const chart = findChart(company)\n  //     if (chart) {\n  //         const priceData = getPriceData(chart)\n  //         const totalData = totalReturn(chart)\n  //         return (\n  //             <tr key={company.id}>\n  //                 <td>{company.id}</td>\n  //                 <td>{company.ticker}</td>\n  //                 <td>{company.name}</td>\n  //                 {priceData.map( (day, index) => {\n  //                     return (\n  //                         <React.Fragment key={index}>\n  //                         <td className='td-right'>${day.close}</td>\n  //                         <td className='td-right'>${day.dollarChg}</td>\n  //                         <td className='td-right'>{day.percentChg}%</td>\n  //                         </React.Fragment>\n  //                     )\n  //                 })}\n  //                 <React.Fragment>\n  //                 <td className='td-right'>${totalData.totalDollarChg}</td>\n  //                 <td className='td-right'>{totalData.totalPercentChg}%</td>\n  //                 </React.Fragment>\n  //             </tr>\n  //         )\n  //     } else { return (<tr>Blank Row</tr>)}\n  // })\n  // Revised functionality based on new tableObject passed as props\n\n\n  return props.daily.map(company => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: company.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, company.id), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, company.ticker), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, company.name), company.data.map((day, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"td-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      }, \"$\", day.close), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          color: day.dollarChg < 0 ? 'red' : 'green'\n        },\n        className: \"td-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      }, \"$\", day.dollarChg), /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          color: day.percentChg < 0 ? 'red' : 'green'\n        },\n        className: \"td-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }\n      }, day.percentChg, \"%\"));\n    }), /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        color: company.totals.totalDollarChg < 0 ? 'red' : 'green'\n      },\n      className: \"td-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }, \"$\", company.totals.totalDollarChg), /*#__PURE__*/React.createElement(\"td\", {\n      style: {\n        color: company.totals.totalPercentChg < 0 ? 'red' : 'green'\n      },\n      className: \"td-right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, company.totals.totalPercentChg, \"%\")));\n  });\n};\n\nexport default DailyRows;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/components/daily/DailyRows.js"],"names":["React","DailyRows","props","console","log","formatNumber","number","Number","isNaN","numberArry","parseFloat","toFixed","split","replace","join","findChart","company","charts","find","chart","chart_type","getPriceData","priceReturn","chart_lines","slice","map","date","index","prevClose","close","dollarChg","percentChg","Math","round","totalReturn","firstClose","lastClose","length","totalDollarChg","totalPercentChg","daily","id","ticker","name","data","day","color","totals"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst DailyRows = props => {\n    console.log('props in dailyrows: ', props)\n    \n    const formatNumber = number => {\n        if (!number || Number.isNaN(number)) { return '' }\n        const numberArry = parseFloat(number).toFixed(2).split('.')\n        numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n        return numberArry.join('.')\n    }\n\n    const findChart = company => {\n        // debugger\n        return company.charts.find(chart => chart.chart_type === 'daily')\n    }\n\n    const getPriceData = chart => {\n        // Return object to use for the price data in the rows\n        const priceReturn =  chart.chart_lines.slice(1).map( (date, index) => {\n                \n                const prevClose = chart.chart_lines[index].close\n                return (\n                    {\n                        close: formatNumber(date.close),\n                        dollarChg: formatNumber(date.close - prevClose),\n                        percentChg: Math.round(((date.close / prevClose) - 1) * 10000) / 100\n\n                    }\n                )})\n        // debugger\n        return priceReturn\n    }\n\n    const totalReturn = chart => {\n        const firstClose = chart.chart_lines[0].close\n        const lastClose = chart.chart_lines[chart.chart_lines.length-1].close\n\n        return { totalDollarChg: formatNumber(lastClose - firstClose),\n            totalPercentChg: Math.round(((lastClose / firstClose) - 1) * 10000) / 100}\n\n    }\n\n    // Original Functionality based on store passed to props\n    // return props.daily.companies.map(company => {\n    //     const chart = findChart(company)\n        \n    //     if (chart) {\n    //         const priceData = getPriceData(chart)\n    //         const totalData = totalReturn(chart)\n    //         return (\n    //             <tr key={company.id}>\n    //                 <td>{company.id}</td>\n    //                 <td>{company.ticker}</td>\n    //                 <td>{company.name}</td>\n    //                 {priceData.map( (day, index) => {\n    //                     return (\n    //                         <React.Fragment key={index}>\n    //                         <td className='td-right'>${day.close}</td>\n    //                         <td className='td-right'>${day.dollarChg}</td>\n    //                         <td className='td-right'>{day.percentChg}%</td>\n    //                         </React.Fragment>\n    //                     )\n    //                 })}\n    //                 <React.Fragment>\n    //                 <td className='td-right'>${totalData.totalDollarChg}</td>\n    //                 <td className='td-right'>{totalData.totalPercentChg}%</td>\n    //                 </React.Fragment>\n    //             </tr>\n\n    //         )\n            \n    //     } else { return (<tr>Blank Row</tr>)}\n\n\n    // })\n\n    // Revised functionality based on new tableObject passed as props\n\n    return props.daily.map(company => { \n        return (\n            <tr key={company.id}>\n                <td>{company.id}</td>\n                <td>{company.ticker}</td>\n                <td>{company.name}</td>\n                {company.data.map( (day, index) => {\n                    return (\n                        <React.Fragment key={index}>\n                        <td className='td-right'>${day.close}</td>\n                        <td style={{color: day.dollarChg<0 ? 'red' : 'green'}} className='td-right'>${day.dollarChg}</td>\n                        <td style={{color: day.percentChg<0 ? 'red' : 'green'}} className='td-right'>{day.percentChg}%</td>\n                        </React.Fragment>\n                    )\n                })}\n                <React.Fragment>\n                <td style={{color: company.totals.totalDollarChg<0 ? 'red' : 'green'}} className='td-right'>${company.totals.totalDollarChg}</td>\n                <td style={{color: company.totals.totalPercentChg<0 ? 'red' : 'green'}} className='td-right'>{company.totals.totalPercentChg}%</td>\n                </React.Fragment>\n            </tr>\n        )\n    })\n}\n\nexport default DailyRows"]},"metadata":{},"sourceType":"module"}