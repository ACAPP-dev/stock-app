{"ast":null,"code":"function getDailyData(formData, watchlistObj, userId) {\n  console.log('formdata from getDailyData: ', formData); // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.startDate) / 1000).toString();\n  const chartEndDate = (Date.parse(formData.endDate) / 1000).toString();\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  const dailyDataArry = [];\n\n  const readyChartData = chartData => {\n    // const newChartData = []\n    return chartData.t.map((date, index) => {\n      return {\n        date: date,\n        open: chartData.o[index],\n        high: chartData.h[index],\n        low: chartData.l[index],\n        close: chartData.c[index]\n      };\n    }); // return newChartData\n  };\n\n  return dispatch => {\n    const databaseFetch = () => {\n      // Persist company and chart data to database\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: userId,\n          watchlistId: formData.watchlistId,\n          data: dailyDataArry\n        })\n      };\n      fetch('http://localhost:3000/daily', companyObject).then(resp => resp.json()).then(json => {\n        console.log('add daily data database response: ', json);\n        return dispatch({\n          type: 'ADD_DAILY_DATA',\n          payload: json\n        });\n      });\n    };\n\n    dispatch({\n      type: 'START_GET_DAILY_DATA'\n    });\n\n    const fetchData = company => {\n      //    debugger\n      // Get company, stock, and chart data from API (3 fetches)\n      fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + company.ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        // companyData = json\n        // debugger\n        console.log('companydata in getdailydata: ', json);\n        return fetchChartData(json);\n      });\n\n      const fetchChartData = companyData => {\n        fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + company.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n          console.log('chart data: ', json); // newChartData = readyChartData(json)\n\n          debugger;\n          return makeObj(companyData, readyChartData(json)); // if (index > watchlistObj.companies.length-1) {\n          //     return databaseFetch()\n          // }\n        });\n      };\n\n      const makeObj = (companyData, chartData) => {\n        const companyDataObject = {\n          [companyData.name]: {\n            ticker: companyData.ticker,\n            name: companyData.name,\n            country: companyData.country,\n            exchange: companyData.exchange,\n            market_cap: companyData.marketCapitalization,\n            outstanding_shares: companyData.shareOutstanding,\n            web_url: companyData.weburl,\n            logo: companyData.logo,\n            industry: companyData.finnhubIndustry\n          },\n          chartStartDate: chartStartDate,\n          chartEndDate: chartEndDate,\n          chartData: chartData\n        };\n      };\n    };\n\n    function getCompany(company) {\n      return company;\n    }\n\n    async function chainedFetchData(p, company) {\n      const companyObj = await p;\n      const companyData = fetchData(company);\n      return { ...companyObj,\n        [company.name]: companyData\n      };\n    }\n\n    debugger;\n    const dailyDataObject = watchlistObj.companies.map(getCompany).reduce(chainedFetchData, Promise.resolve({})).then(console.log); // return watchlistObj.companies.reduce(company => fetchData(company), dailyDataArry)\n\n    debugger;\n  };\n}\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","watchlistObj","userId","console","log","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","startDate","toString","chartEndDate","endDate","finnhubTimeframeUrl","dailyDataArry","readyChartData","chartData","t","map","date","index","open","o","high","h","low","l","close","c","dispatch","databaseFetch","companyObject","method","headers","body","JSON","stringify","watchlistId","data","fetch","then","resp","json","type","payload","fetchData","company","ticker","fetchChartData","companyData","makeObj","companyDataObject","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","getCompany","chainedFetchData","p","companyObj","dailyDataObject","companies","reduce","Promise","resolve"],"mappings":"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","sourcesContent":["function getDailyData(formData, watchlistObj, userId) {\n    console.log('formdata from getDailyData: ', formData)\n  \n      // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_QUOTE_URL = '/quote?symbol='\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.startDate)/1000).toString()\n    const chartEndDate = (Date.parse(formData.endDate)/1000).toString()\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n   \n    \n    const dailyDataArry = []\n\n    \n\n    const readyChartData = (chartData) => {\n        // const newChartData = []\n        \n        return chartData.t.map( (date, index) => {\n            return (\n                {date: date,\n                open: chartData.o[index],\n                high: chartData.h[index],\n                low: chartData.l[index],\n                close: chartData.c[index]\n                }\n            )\n        })\n        // return newChartData\n    }\n\n    \n\n    return dispatch => {\n\n        \n\n        const databaseFetch = () => {\n            // Persist company and chart data to database\n    \n            const companyObject = {\n                method: 'POST',\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                body: JSON.stringify({userId: userId, watchlistId: formData.watchlistId, data: dailyDataArry})\n            }\n    \n            fetch('http://localhost:3000/daily', companyObject)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('add daily data database response: ', json)\n                return dispatch({type: 'ADD_DAILY_DATA', payload: json})\n            })\n        }\n\n        dispatch({ type: 'START_GET_DAILY_DATA'})\n        \n        \n        const fetchData = company => {\n        //    debugger\n            // Get company, stock, and chart data from API (3 fetches)\n    \n                fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + company.ticker + FINNHUB_API_KEY)\n                .then(resp => resp.json())\n                .then(json => {\n                    // companyData = json\n                    // debugger\n                    console.log('companydata in getdailydata: ', json)\n                    return fetchChartData(json)\n                })\n\n                const fetchChartData = (companyData) => {\n                    fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + company.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n                    .then(resp => resp.json())\n                    .then(json => {\n                        console.log('chart data: ', json)\n                        // newChartData = readyChartData(json)\n                        debugger\n                        return makeObj(companyData, readyChartData(json))\n                        // if (index > watchlistObj.companies.length-1) {\n                        //     return databaseFetch()\n                            \n                        // }\n                    })\n                }\n        \n                \n                \n                const makeObj = (companyData, chartData) => {\n                    const companyDataObject = {\n                        [companyData.name]: {\n                            ticker: companyData.ticker,\n                            name: companyData.name,\n                            country: companyData.country,\n                            exchange: companyData.exchange,\n                            market_cap: companyData.marketCapitalization,\n                            outstanding_shares: companyData.shareOutstanding,\n                            web_url: companyData.weburl,\n                            logo: companyData.logo,\n                            industry: companyData.finnhubIndustry\n                            },\n                        chartStartDate: chartStartDate,\n                        chartEndDate: chartEndDate,\n                        chartData: chartData\n                    }\n                    \n                    \n                }\n        }\n\n        function getCompany(company) {\n            return company\n        }\n\n        async function chainedFetchData(p, company) {\n            const companyObj = await p\n            const companyData = fetchData(company)\n            return {...companyObj, [company.name]: companyData}\n\n        }\n        debugger\n        const dailyDataObject = watchlistObj.companies\n            .map(getCompany)\n            .reduce(chainedFetchData, Promise.resolve({}))\n            .then(console.log)\n        // return watchlistObj.companies.reduce(company => fetchData(company), dailyDataArry)\n\n        debugger\n        \n    }\n\n}\n    export default getDailyData"]},"metadata":{},"sourceType":"module"}