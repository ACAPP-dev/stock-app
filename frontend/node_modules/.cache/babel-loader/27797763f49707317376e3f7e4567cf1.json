{"ast":null,"code":"function fetchCompany(ticker) {\n  // from to in stock data is unix time from 6/1/20 to 6/15/20\n  // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  let chartStartDate = '1593561600'; // July 1, 2020 - need to make this variable\n\n  let chartEndDate = '1596153600'; // July 31, 2020 - need to make this variable\n\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  let companyData = {};\n  let basicData = {};\n  let chartData = {};\n  return dispatch => {\n    dispatch({\n      type: 'START_COMPANY_FETCH'\n    }); // Get company, stock, and chart data from API (3 fetches)\n\n    fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n      companyData = json;\n      return fetchBasicData();\n    });\n\n    const fetchBasicData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + ticker + '&metric=price' + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        basicData = json.metric;\n        return fetchChartData();\n      });\n    };\n\n    const fetchChartData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        console.log(json);\n        chartData = json;\n        readyChartData();\n        debugger;\n        return databaseFetch();\n      });\n    };\n\n    const databaseFetch = () => {\n      // Persist company data to database\n      // create_table \"companies\", force: :cascade do |t|\n      // t.string \"ticker\"\n      // t.string \"name\"\n      // t.string \"country\"\n      // t.string \"exchange\"\n      // t.string \"market_cap\"\n      // t.string \"outstanding_shares\"\n      // t.string \"web_url\"\n      // t.string \"logo\"\n      // t.string \"industry\"\n      // t.string \"three_month_trading_volume\"\n      // t.string \"fifty_two_week_high\"\n      // t.string \"fifty_two_week_high_date\"\n      // t.string \"fifty_two_week_low\"\n      // t.string \"fifty_two_week_low_date\"\n      const companyDataObject = {\n        data: {\n          ticker: companyData.ticker,\n          name: companyData.name,\n          country: companyData.country,\n          exchange: companyData.exchange,\n          market_cap: companyData.marketCapitalization,\n          outstanding_shares: companyData.shareOutstanding,\n          web_url: companyData.weburl,\n          logo: companyData.logo,\n          industry: companyData.finnhubIndustry,\n          three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n          fifty_two_week_high: basicData['52WeekHigh'],\n          fifty_two_week_high_date: basicData['52WeekHighDate'],\n          fifty_two_week_low: basicData['52WeekLow'],\n          fifty_two_week_low_date: basicData['52WeekLowDate']\n        }\n      };\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(companyDataObject)\n      };\n      fetch('http://localhost:3000/companies', companyObject).then(resp => resp.json()).then(json => {\n        console.log('company database response: ', json);\n        return dispatch({\n          type: 'ADD_COMPANY',\n          payload: json\n        });\n      });\n    };\n  };\n} // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\n\n\nconst readyChartData = () => {\n  const newChartData = [];\n  chartData.t.map((date, index) => {\n    return newChartData.push({\n      date: date,\n      open: newChartData.o[index],\n      high: newChartData.h[index],\n      low: newChartData.l[index],\n      close: newChartData.c[index]\n    });\n  });\n  console.log(newChartData);\n  return newChartData;\n}; // newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\n\nexport default fetchCompany;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/fetchCompany.js"],"names":["fetchCompany","ticker","FINNHUB_BASIC_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","chartEndDate","finnhubTimeframeUrl","companyData","basicData","chartData","dispatch","type","fetch","then","resp","json","fetchBasicData","metric","fetchChartData","console","log","readyChartData","databaseFetch","companyDataObject","data","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","three_month_trading_volume","fifty_two_week_high","fifty_two_week_high_date","fifty_two_week_low","fifty_two_week_low_date","companyObject","method","headers","body","JSON","stringify","payload","newChartData","t","map","date","index","push","open","o","high","h","low","l","close","c"],"mappings":"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","sourcesContent":["function fetchCompany(ticker) {\n    \n  \n  // from to in stock data is unix time from 6/1/20 to 6/15/20\n// const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\nconst FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\nconst FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\nconst FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\nconst FINNHUB_CHART_URL = '/stock/candle?symbol='\nconst FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\nconst FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\nlet chartStartDate = '1593561600' // July 1, 2020 - need to make this variable\nlet chartEndDate = '1596153600' // July 31, 2020 - need to make this variable\nlet finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\nlet companyData = {}\nlet basicData = {}\nlet chartData = {}\n\n    return dispatch => {\n        dispatch({ type: 'START_COMPANY_FETCH'})\n        \n        // Get company, stock, and chart data from API (3 fetches)\n\n        fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY)\n        .then(resp => resp.json())\n        .then(json => {\n            companyData = json\n            return fetchBasicData()\n        })\n\n        const fetchBasicData = () => {\n            fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + ticker + '&metric=price' + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                basicData = json.metric\n                return fetchChartData()\n            })\n        }\n\n        const fetchChartData = () => {\n            fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log(json)\n                chartData = json\n                readyChartData()\n                debugger\n                return databaseFetch()\n            })\n\n        }\n\n\n        const databaseFetch = () => {\n        // Persist company data to database\n\n        // create_table \"companies\", force: :cascade do |t|\n        // t.string \"ticker\"\n        // t.string \"name\"\n        // t.string \"country\"\n        // t.string \"exchange\"\n        // t.string \"market_cap\"\n        // t.string \"outstanding_shares\"\n        // t.string \"web_url\"\n        // t.string \"logo\"\n        // t.string \"industry\"\n        // t.string \"three_month_trading_volume\"\n        // t.string \"fifty_two_week_high\"\n        // t.string \"fifty_two_week_high_date\"\n        // t.string \"fifty_two_week_low\"\n        // t.string \"fifty_two_week_low_date\"\n\n        const companyDataObject = {data: {\n            ticker: companyData.ticker,\n            name: companyData.name,\n            country: companyData.country,\n            exchange: companyData.exchange,\n            market_cap: companyData.marketCapitalization,\n            outstanding_shares: companyData.shareOutstanding,\n            web_url: companyData.weburl,\n            logo: companyData.logo,\n            industry: companyData.finnhubIndustry,\n            three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n            fifty_two_week_high: basicData['52WeekHigh'],\n            fifty_two_week_high_date: basicData['52WeekHighDate'],\n            fifty_two_week_low: basicData['52WeekLow'],\n            fifty_two_week_low_date: basicData['52WeekLowDate']\n        }}\n        \n        const companyObject = {\n            method: 'POST',\n            headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n            body: JSON.stringify(companyDataObject)\n        }\n\n        fetch('http://localhost:3000/companies', companyObject)\n        .then(resp => resp.json())\n        .then(json => {\n            console.log('company database response: ', json)\n            return dispatch({type: 'ADD_COMPANY', payload: json})\n        })\n        }\n    }\n}\n\n// Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\nconst readyChartData = () => {\n    const newChartData = []\n\n    chartData.t.map( (date, index) => {\n        return newChartData.push(\n            {date: date,\n            open: newChartData.o[index],\n            high: newChartData.h[index],\n            low: newChartData.l[index],\n            close: newChartData.c[index]\n            }\n        )\n    })\n    console.log(newChartData)\n    return newChartData\n}\n// newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\nexport default fetchCompany"]},"metadata":{},"sourceType":"module"}