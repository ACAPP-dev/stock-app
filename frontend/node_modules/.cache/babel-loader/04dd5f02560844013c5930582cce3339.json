{"ast":null,"code":"function getDailyData(formData, watchlistObj, userId) {\n  console.log('formdata from getDailyData: ', formData); // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.startDate) / 1000).toString();\n  const chartEndDate = (Date.parse(formData.endDate) / 1000).toString();\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n\n  const readyChartData = chartData => {\n    return chartData.t.map((date, index) => {\n      return {\n        date: date,\n        open: chartData.o[index],\n        high: chartData.h[index],\n        low: chartData.l[index],\n        close: chartData.c[index]\n      };\n    });\n  };\n\n  return dispatch => {\n    dispatch({\n      type: 'START_GET_DAILY_DATA'\n    });\n\n    const databaseFetch = dailyData => {\n      // Persist company and chart data to database\n      debugger;\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({\n          userId: userId,\n          watchlistId: formData.watchlistId,\n          data: dailyData\n        })\n      };\n      fetch('http://localhost:3000/daily', companyObject).then(resp => resp.json()).then(json => {\n        console.log('add daily data database response: ', json);\n        return dispatch({\n          type: 'ADD_DAILY_DATA',\n          payload: json\n        });\n      });\n    };\n\n    function fetchData(ticker) {\n      return fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        console.log('companydata in getdailydata: ', json);\n        return makeCompanyObj(json);\n      });\n    }\n\n    function fetchChart(ticker) {\n      return fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        console.log('chart data: ', json);\n        return {\n          chartStartDate: chartStartDate,\n          chartEndDate: chartEndDate,\n          chartData: readyChartData(json)\n        };\n      });\n    }\n\n    const makeCompanyObj = companyData => {\n      return {\n        ticker: companyData.ticker,\n        name: companyData.name,\n        country: companyData.country,\n        exchange: companyData.exchange,\n        market_cap: companyData.marketCapitalization,\n        outstanding_shares: companyData.shareOutstanding,\n        web_url: companyData.weburl,\n        logo: companyData.logo,\n        industry: companyData.finnhubIndustry\n      };\n    };\n\n    async function chainedFetchData(p, ticker) {\n      const companyObj = await p;\n      const companyData = await fetchData(ticker);\n      const chartData = await fetchChart(ticker);\n      console.log(companyData);\n      console.log(chartData); // debugger\n\n      return { ...companyObj,\n        [ticker]: {\n          companyData: companyData,\n          chartData: chartData\n        }\n      };\n    }\n\n    const dailyDataObject = watchlistObj.companies.map(company => company.ticker).reduce(chainedFetchData, Promise.resolve({})).then(dailyData => console.log(dailyData)).then(dailyData => databaseFetch(dailyData));\n  };\n}\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","watchlistObj","userId","console","log","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","startDate","toString","chartEndDate","endDate","finnhubTimeframeUrl","readyChartData","chartData","t","map","date","index","open","o","high","h","low","l","close","c","dispatch","type","databaseFetch","dailyData","companyObject","method","headers","body","JSON","stringify","watchlistId","data","fetch","then","resp","json","payload","fetchData","ticker","makeCompanyObj","fetchChart","companyData","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","chainedFetchData","p","companyObj","dailyDataObject","companies","company","reduce","Promise","resolve"],"mappings":"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","sourcesContent":["function getDailyData(formData, watchlistObj, userId) {\n    console.log('formdata from getDailyData: ', formData)\n  \n      // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_QUOTE_URL = '/quote?symbol='\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.startDate)/1000).toString()\n    const chartEndDate = (Date.parse(formData.endDate)/1000).toString()\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n   \n    \n  \n\n    \n\n    const readyChartData = (chartData) => {\n        return chartData.t.map( (date, index) => {\n            return (\n                {date: date,\n                open: chartData.o[index],\n                high: chartData.h[index],\n                low: chartData.l[index],\n                close: chartData.c[index]\n                }\n            )\n        })\n    }\n\n    \n\n    return dispatch => {\n        dispatch({ type: 'START_GET_DAILY_DATA'})\n        \n        const databaseFetch = dailyData => {\n            // Persist company and chart data to database\n            debugger\n            const companyObject = {\n                method: 'POST',\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                body: JSON.stringify({userId: userId, watchlistId: formData.watchlistId, data: dailyData})\n            }\n    \n            fetch('http://localhost:3000/daily', companyObject)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('add daily data database response: ', json)\n                return dispatch({type: 'ADD_DAILY_DATA', payload: json})\n            })\n        }\n\n        \n\n        function fetchData(ticker) {\n            return fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + ticker + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('companydata in getdailydata: ', json)\n                return makeCompanyObj(json)\n            })\n        }\n\n        function fetchChart(ticker) {\n            return fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('chart data: ', json)\n                return {\n                    chartStartDate: chartStartDate,\n                    chartEndDate: chartEndDate,\n                    chartData: readyChartData(json)\n                }\n            })\n        }\n        \n        \n     \n                \n        const makeCompanyObj = (companyData) => {\n            return {\n                ticker: companyData.ticker,\n                name: companyData.name,\n                country: companyData.country,\n                exchange: companyData.exchange,\n                market_cap: companyData.marketCapitalization,\n                outstanding_shares: companyData.shareOutstanding,\n                web_url: companyData.weburl,\n                logo: companyData.logo,\n                industry: companyData.finnhubIndustry\n            }  \n        }\n        \n\n        async function chainedFetchData(p, ticker) {\n            \n            const companyObj = await p\n            const companyData = await fetchData(ticker)\n            const chartData = await fetchChart(ticker)\n            console.log(companyData)\n            console.log(chartData)\n            // debugger\n            return {...companyObj, [ticker]: {companyData: companyData, chartData: chartData}}\n    \n        }\n       \n        const dailyDataObject = watchlistObj.companies\n            .map(company => company.ticker)\n            .reduce(chainedFetchData, Promise.resolve({}))\n            .then(dailyData => console.log(dailyData))\n            .then(dailyData => databaseFetch(dailyData))\n\n    }\n    \n}\n    export default getDailyData"]},"metadata":{},"sourceType":"module"}