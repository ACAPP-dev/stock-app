{"ast":null,"code":"function getDailyData(formData, userId) {\n  debugger; // from to in stock data is unix time from 6/1/20 to 6/15/20\n  // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.startDate) / 1000).toString(); // 1593561600000\n  // 1593561600\n  // Test Date: '1593561600' // July 1, 2020 - need to make this variable\n\n  const chartEndDate = (Date.parse(formData.endDate) / 1000).toString(); // Test Date: '1596153600' // July 31, 2020 - need to make this variable\n\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  let companyData = {};\n  let quoteData = {};\n  let basicData = {};\n  let newChartData = [];\n  return dispatch => {\n    dispatch({\n      type: 'START_GET_DAILY_DATA'\n    }); // Get company, stock, and chart data from API (3 fetches)\n\n    fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n      companyData = json;\n      return fetchChartData();\n    });\n\n    const fetchChartData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        console.log('chart data: ', json);\n        newChartData = readyChartData(json);\n        return databaseFetch();\n      });\n    };\n\n    const databaseFetch = () => {\n      // Persist company and chart data to database\n      const companyDataObject = {\n        data: {\n          ticker: companyData.ticker,\n          name: companyData.name,\n          country: companyData.country,\n          exchange: companyData.exchange,\n          market_cap: companyData.marketCapitalization,\n          outstanding_shares: companyData.shareOutstanding,\n          web_url: companyData.weburl,\n          logo: companyData.logo,\n          industry: companyData.finnhubIndustry\n        },\n        chartStartDate: chartStartDate,\n        chartEndDate: chartEndDate,\n        chartData: newChartData\n      };\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(companyDataObject)\n      };\n      fetch('http://localhost:3000/companies', companyObject).then(resp => resp.json()).then(json => {\n        console.log('company database response: ', json);\n        return dispatch({\n          type: 'ADD_DAILY_DATA',\n          payload: json\n        });\n      });\n    };\n  };\n} // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\n\n\nconst readyChartData = chartData => {\n  const newChartData = [];\n  chartData.t.map((date, index) => {\n    return newChartData.push({\n      date: date,\n      open: chartData.o[index],\n      high: chartData.h[index],\n      low: chartData.l[index],\n      close: chartData.c[index]\n    });\n  }); // console.log(newChartData)\n\n  return newChartData;\n}; // Example of chart data format: \n//  newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","userId","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","startDate","toString","chartEndDate","endDate","finnhubTimeframeUrl","companyData","quoteData","basicData","newChartData","dispatch","type","fetch","ticker","then","resp","json","fetchChartData","console","log","readyChartData","databaseFetch","companyDataObject","data","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","chartData","companyObject","method","headers","body","JSON","stringify","payload","t","map","date","index","push","open","o","high","h","low","l","close","c"],"mappings":"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","sourcesContent":["function getDailyData(formData, userId) {\n    \n      debugger\n      // from to in stock data is unix time from 6/1/20 to 6/15/20\n    // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_QUOTE_URL = '/quote?symbol='\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.startDate)/1000).toString()\n    \n    // 1593561600000\n    // 1593561600\n    // Test Date: '1593561600' // July 1, 2020 - need to make this variable\n    const chartEndDate = (Date.parse(formData.endDate)/1000).toString()\n    // Test Date: '1596153600' // July 31, 2020 - need to make this variable\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n    let companyData = {}\n    let quoteData = {}\n    let basicData = {}\n    let newChartData = []\n    \n        return dispatch => {\n            dispatch({ type: 'START_GET_DAILY_DATA'})\n            \n            // Get company, stock, and chart data from API (3 fetches)\n    \n            fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                companyData = json\n                return fetchChartData()\n            })\n\n            const fetchChartData = () => {\n                fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n                .then(resp => resp.json())\n                .then(json => {\n                    console.log('chart data: ', json)\n                    newChartData = readyChartData(json)\n                    return databaseFetch()\n                })\n    \n            }\n    \n    \n            const databaseFetch = () => {\n                // Persist company and chart data to database\n    \n                const companyDataObject = {\n                    data: {\n                        ticker: companyData.ticker,\n                        name: companyData.name,\n                        country: companyData.country,\n                        exchange: companyData.exchange,\n                        market_cap: companyData.marketCapitalization,\n                        outstanding_shares: companyData.shareOutstanding,\n                        web_url: companyData.weburl,\n                        logo: companyData.logo,\n                        industry: companyData.finnhubIndustry\n                        },\n                    chartStartDate: chartStartDate,\n                    chartEndDate: chartEndDate,\n                    chartData: newChartData\n                }\n            \n                const companyObject = {\n                    method: 'POST',\n                    headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                    body: JSON.stringify(companyDataObject)\n                }\n    \n                fetch('http://localhost:3000/companies', companyObject)\n                .then(resp => resp.json())\n                .then(json => {\n                    console.log('company database response: ', json)\n                    return dispatch({type: 'ADD_DAILY_DATA', payload: json})\n                })\n            }\n        }\n    }\n    \n    // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n    // Add volume to model later?\n    const readyChartData = (chartData) => {\n        const newChartData = []\n    \n        chartData.t.map( (date, index) => {\n            return newChartData.push(\n                {date: date,\n                open: chartData.o[index],\n                high: chartData.h[index],\n                low: chartData.l[index],\n                close: chartData.c[index]\n                }\n            )\n        })\n        // console.log(newChartData)\n        return newChartData\n    }\n    // Example of chart data format: \n    //  newChart.data = [ {\n    //     \"date\": \"2018-08-01\",\n    //     \"open\": \"136.65\",\n    //     \"high\": \"136.96\",\n    //     \"low\": \"134.15\",\n    //     \"close\": \"136.49\"\n    //   },\n    \n    export default getDailyData"]},"metadata":{},"sourceType":"module"}