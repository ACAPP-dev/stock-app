{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/stocks-app/frontend/src/containers/DailyContainer.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport DailyRows from '../components/daily/DailyRows';\nimport DailyForm from '../components/daily/DailyForm';\nimport getDailyData from '../actions/getDailyData';\nimport Alert from 'react-bootstrap/Alert';\nimport Table from 'react-bootstrap/Table';\n\nclass DailyContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showRequesting = () => {\n      return /*#__PURE__*/React.createElement(Alert, {\n        className: \"alert\",\n        variant: \"warning\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 60\n        }\n      }, \"Requesting Data\"));\n    };\n\n    this.getDailyData = formData => {\n      const watchlistObj = this.props.user.watchlists.find(watchlist => {\n        return watchlist.id === formData.watchlistId;\n      });\n      this.props.getDailyData(formData, watchlistObj, this.props.user.id);\n    };\n\n    this.formatDate = date => {\n      const newDate = new Date(date * 1000).toUTCString();\n      return newDate.split(' ').slice(0, 4).join(' ');\n    };\n\n    this.getTableDays = () => {\n      let dateArry = ['Day0', 'Day 1', 'Day 2', 'Day 3'];\n\n      if (this.props.daily.companies.length > 0) {\n        const firstChart = this.props.daily.companies[0].charts[0] || null;\n\n        if (firstChart && firstChart.chart_lines.length > 0) {\n          dateArry = firstChart.chart_lines.map(line => {\n            return this.formatDate(line.date);\n          });\n        }\n      }\n\n      return dateArry;\n    };\n\n    this.findChart = company => {\n      return company.charts.find(chart => chart.chart_type === 'daily');\n    };\n\n    this.formatNumber = number => {\n      if (!number || Number.isNaN(number)) {\n        return '';\n      }\n\n      const numberArry = parseFloat(number).toFixed(2).split('.');\n      numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n      return numberArry.join('.');\n    };\n\n    this.makePriceObject = chart => {\n      // Return object to use for the price data in the rows\n      const priceObject = chart.chart_lines.slice(1).map((date, index) => {\n        const prevClose = chart.chart_lines[index].close;\n        return {\n          date: date.date,\n          close: this.formatNumber(date.close),\n          dollarChg: this.formatNumber(date.close - prevClose),\n          percentChg: Math.round((date.close / prevClose - 1) * 10000) / 100\n        };\n      });\n      return priceObject;\n    };\n\n    this.totalReturn = chart => {\n      const firstClose = chart.chart_lines[0].close;\n      const lastClose = chart.chart_lines[chart.chart_lines.length - 1].close;\n      return {\n        totalDollarChg: this.formatNumber(lastClose - firstClose),\n        totalPercentChg: Math.round((lastClose / firstClose - 1) * 10000) / 100\n      };\n    };\n\n    this.consolidateTableData = () => {\n      // Making object for the table data that can be sorted easier\n      let tableObject = []; // tableObject [\n      //     {\n      //         id: \"1\",\n      //         ticker: \"BAC\",\n      //         name: \"Bank of Amer\",\n      //         data: [ {date: \"xx\", close: \"xx\", chg$: \"xx\", chg%: \"xx} ]\n      //     }\n      // ]\n\n      if (this.props.daily.companies.length > 0) {\n        tableObject = this.props.daily.companies.map(company => {\n          let chartArry = [];\n\n          if (this.findChart(company)) {\n            chartArry = this.makePriceObject(this.findChart(company));\n          }\n\n          const companyObject = {\n            id: company.id,\n            ticker: company.ticker,\n            name: company.name,\n            data: chartArry,\n            totals: this.totalReturn(this.findChart(company))\n          };\n          return companyObject;\n        });\n      } // return tableObject <- this is old functionality\n\n\n      this.setState({\n        tableDetailArry: tableObject\n      });\n    };\n\n    this.state = {\n      tableDetailArry: []\n    };\n    this.handleSort = this.handleSort.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    console.log('Componentdidupdate: ', prevState, prevProps);\n\n    if (prevProps.daily.companies !== this.props.daily.companies) {\n      this.consolidateTableData();\n    }\n  }\n\n  handleSort(event) {\n    let sortedTable = [];\n\n    switch (event.target.id) {\n      case 'ticker':\n        sortedTable = this.state.tableDetailArry.sort((a, b) => {\n          return a.ticker > b.ticker ? 1 : -1;\n        });\n        this.setState({\n          tableDetailArry: sortedTable\n        });\n        break;\n\n      case 'totalDollarChg':\n        sortedTable = this.state.tableDetailArry.sort((a, b) => {\n          debugger;\n          return a.totals.totalDollarChg > b.totals.totalDollarChg ? 1 : -1;\n        });\n        this.setState({\n          tableDetailArry: sortedTable\n        });\n        break;\n\n      case 'totalPercentChg':\n        sortedTable = this.state.tableDetailArry.sort((a, b) => {\n          return a.totals.totalPercentChg > b.totals.totalPercentChg ? 1 : -1;\n        });\n        this.setState({\n          tableDetailArry: sortedTable\n        });\n        break;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"daily-div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, this.props.daily.requesting ? this.showRequesting() : null, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, \"View Watchlist Stock Data for Selected Days\"), /*#__PURE__*/React.createElement(DailyForm, {\n      returnGetData: this.getDailyData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      size: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 29\n      }\n    }, \"#\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"ticker\",\n      onClick: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 29\n      }\n    }, \"Ticker\")), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 29\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 29\n      }\n    }, this.getTableDays()[1]), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 29\n      }\n    }, this.getTableDays()[2]), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 29\n      }\n    }, this.getTableDays()[3]), /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, \"Total\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      colSpan: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 29\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 29\n      }\n    }, \"$ Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, \"% Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }, \"$ Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, \"% Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 29\n      }\n    }, \"$ Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, \"% Change\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"totalDollarChg\",\n      onClick: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 33\n      }\n    }, \"$ Change\")), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"totalPercentChg\",\n      onClick: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 33\n      }\n    }, \"% Change\")))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, this.props.daily.companies.length < 1 ? /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 66\n      }\n    }) : /*#__PURE__*/React.createElement(DailyRows, {\n      daily: this.state.tableDetailArry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log('State in dailycontainer: ', state);\n  return {\n    user: state.user,\n    daily: state.daily\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getDailyData: (formData, watchlistObj, userId) => dispatch(getDailyData(formData, watchlistObj, userId))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DailyContainer);","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/containers/DailyContainer.js"],"names":["React","connect","DailyRows","DailyForm","getDailyData","Alert","Table","DailyContainer","Component","constructor","props","showRequesting","formData","watchlistObj","user","watchlists","find","watchlist","id","watchlistId","formatDate","date","newDate","Date","toUTCString","split","slice","join","getTableDays","dateArry","daily","companies","length","firstChart","charts","chart_lines","map","line","findChart","company","chart","chart_type","formatNumber","number","Number","isNaN","numberArry","parseFloat","toFixed","replace","makePriceObject","priceObject","index","prevClose","close","dollarChg","percentChg","Math","round","totalReturn","firstClose","lastClose","totalDollarChg","totalPercentChg","consolidateTableData","tableObject","chartArry","companyObject","ticker","name","data","totals","setState","tableDetailArry","state","handleSort","bind","componentDidUpdate","prevProps","prevState","console","log","event","sortedTable","target","sort","a","b","render","requesting","mapStateToProps","mapDispatchToProps","dispatch","userId"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nimport DailyRows from '../components/daily/DailyRows'\nimport DailyForm from '../components/daily/DailyForm'\nimport getDailyData from '../actions/getDailyData'\n\nimport Alert from 'react-bootstrap/Alert'\nimport Table from 'react-bootstrap/Table'\n\nclass DailyContainer extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            tableDetailArry: []\n        }\n        this.handleSort = this.handleSort.bind(this)\n    }\n    \n    componentDidUpdate(prevProps, prevState) {\n        console.log('Componentdidupdate: ', prevState, prevProps)\n        if (prevProps.daily.companies !== this.props.daily.companies) {\n            this.consolidateTableData()\n        }\n    }\n\n    handleSort (event) {\n        let sortedTable = []\n\n        switch (event.target.id) {\n            case 'ticker':\n                sortedTable = this.state.tableDetailArry.sort((a,b) => {return a.ticker > b.ticker ? 1 : -1})\n                this.setState({tableDetailArry: sortedTable})\n                break\n            case 'totalDollarChg':\n                sortedTable = this.state.tableDetailArry.sort((a,b) => {\n                    debugger\n                    return a.totals.totalDollarChg > b.totals.totalDollarChg ? 1 : -1})\n                this.setState({tableDetailArry: sortedTable})\n                break\n            case 'totalPercentChg':\n                sortedTable = this.state.tableDetailArry.sort((a,b) => {return a.totals.totalPercentChg > b.totals.totalPercentChg ? 1 : -1})\n                this.setState({tableDetailArry: sortedTable})\n                break\n        }\n        \n    }\n\n    showRequesting = () => {\n        return (<Alert className='alert' variant='warning'><h4>Requesting Data</h4></Alert>)\n    }\n\n    getDailyData = formData => {\n        \n        const watchlistObj = this.props.user.watchlists.find(watchlist => {\n            return watchlist.id === formData.watchlistId\n        })\n        this.props.getDailyData(formData, watchlistObj, this.props.user.id)\n    }\n\n    formatDate = date => {\n        const newDate = new Date(date * 1000).toUTCString()\n        return newDate.split(' ').slice(0,4).join(' ')\n    }\n\n    getTableDays = () => {\n        let dateArry = ['Day0', 'Day 1', 'Day 2', 'Day 3']\n        \n        if (this.props.daily.companies.length > 0) {\n            const firstChart = this.props.daily.companies[0].charts[0] || null\n            if (firstChart && firstChart.chart_lines.length > 0) {\n                dateArry = firstChart.chart_lines.map(line => {\n                    return this.formatDate(line.date)\n                })   \n            }\n        }\n        return dateArry\n    }\n\n    findChart = (company) => {\n        return company.charts.find(chart => chart.chart_type === 'daily')\n    }\n\n    formatNumber = number => {\n        if (!number || Number.isNaN(number)) { return '' }\n        const numberArry = parseFloat(number).toFixed(2).split('.')\n        numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n        return numberArry.join('.')\n    }\n\n    makePriceObject = (chart) => {\n        // Return object to use for the price data in the rows\n        const priceObject =  chart.chart_lines.slice(1).map( (date, index) => {\n                \n                const prevClose = chart.chart_lines[index].close\n                return (\n                    {\n                        date: date.date,\n                        close: this.formatNumber(date.close),\n                        dollarChg: this.formatNumber(date.close - prevClose),\n                        percentChg: Math.round(((date.close / prevClose) - 1) * 10000) / 100\n\n                    }\n                )})\n        return priceObject\n    }\n\n    totalReturn = (chart) => {\n        const firstClose = chart.chart_lines[0].close\n        const lastClose = chart.chart_lines[chart.chart_lines.length-1].close\n\n        return { totalDollarChg: this.formatNumber(lastClose - firstClose),\n            totalPercentChg: Math.round(((lastClose / firstClose) - 1) * 10000) / 100}\n\n    }\n    consolidateTableData = () => {\n        // Making object for the table data that can be sorted easier\n        let tableObject = []\n        // tableObject [\n        //     {\n        //         id: \"1\",\n        //         ticker: \"BAC\",\n        //         name: \"Bank of Amer\",\n        //         data: [ {date: \"xx\", close: \"xx\", chg$: \"xx\", chg%: \"xx} ]\n        //     }\n        // ]\n\n        if (this.props.daily.companies.length > 0) {\n            tableObject = this.props.daily.companies.map(company => {\n                let chartArry = []\n                if (this.findChart(company)) {\n                    chartArry = this.makePriceObject(this.findChart(company))\n                    \n                    }\n\n                const companyObject = {\n                    id: company.id,\n                    ticker: company.ticker,\n                    name: company.name,\n                    data: chartArry,\n                    totals: this.totalReturn(this.findChart(company))\n                }\n                return companyObject\n            })\n        }\n        // return tableObject <- this is old functionality\n        this.setState({tableDetailArry: tableObject})\n    }\n\n    render() {\n        return (\n            <div className='daily-div'>\n                {this.props.daily.requesting ? this.showRequesting() : null}\n                <h2>View Watchlist Stock Data for Selected Days</h2>\n                < DailyForm returnGetData={this.getDailyData}/>\n\n                <Table striped bordered hover size='sm'>\n                    <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>\n                            <button id='ticker' onClick={this.handleSort}>Ticker</button>\n                                </th>\n                            <th>Name</th>\n                            <th colSpan='3'>{this.getTableDays()[1]}</th>\n                            <th colSpan='3'>{this.getTableDays()[2]}</th>\n                            <th colSpan='3'>{this.getTableDays()[3]}</th>\n                            \n                            <th colSpan='2'>Total</th>\n                            \n                        </tr>\n                        <tr>\n                            <th colSpan='3'></th>\n                            <th>Close</th>\n                            <th>$ Change</th>\n                            <th>% Change</th>\n                            <th>Close</th>\n                            <th>$ Change</th>\n                            <th>% Change</th>\n                            \n                            <th>Close</th>\n                            <th>$ Change</th>\n                            <th>% Change</th>\n                            <th>\n                                <button id=\"totalDollarChg\" onClick={this.handleSort}>$ Change</button>\n                            </th>\n                            <th>\n                                <button id=\"totalPercentChg\" onClick={this.handleSort}>% Change</button>\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {/* {this.props.daily.companies.length < 1 ? <tr /> : \n                        < DailyRows daily={this.props.daily} /> } */}\n                        {this.props.daily.companies.length < 1 ? <tr /> : \n                        < DailyRows daily={this.state.tableDetailArry} /> }\n                        {/* // < DailyRows daily={this.consolidateTableData()} /> } */}\n                    </tbody>\n                </Table>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    console.log('State in dailycontainer: ', state)\n    return {\n        user: state.user,\n        daily: state.daily\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {getDailyData: (formData, watchlistObj, userId) => dispatch(getDailyData(formData, watchlistObj, userId))}\n}\n\nexport default connect (mapStateToProps, mapDispatchToProps)(DailyContainer)"]},"metadata":{},"sourceType":"module"}