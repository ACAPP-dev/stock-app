{"ast":null,"code":"function fetchCompany(formData) {\n  debugger; // from to in stock data is unix time from 6/1/20 to 6/15/20\n  // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  let chartStartDate = '1593561600'; // July 1, 2020 - need to make this variable\n\n  let chartEndDate = '1596153600'; // July 31, 2020 - need to make this variable\n\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  let companyData = {};\n  let quoteData = {};\n  let basicData = {};\n  let newChartData = [];\n  return dispatch => {\n    dispatch({\n      type: 'START_COMPANY_FETCH'\n    }); // Get company, stock, and chart data from API (3 fetches)\n\n    fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n      companyData = json;\n      return fetchQuoteData();\n    });\n\n    const fetchQuoteData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_QUOTE_URL + formData.ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        quoteData = json;\n        return fetchBasicData();\n      });\n    };\n\n    const fetchBasicData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + formData.ticker + '&metric=price' + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        basicData = json.metric;\n        return fetchChartData();\n      });\n    };\n\n    const fetchChartData = () => {\n      fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        newChartData = readyChartData(json);\n        return databaseFetch();\n      });\n    };\n\n    const databaseFetch = () => {\n      // Persist company and chart data to database\n      const companyDataObject = {\n        data: {\n          ticker: companyData.ticker,\n          name: companyData.name,\n          country: companyData.country,\n          exchange: companyData.exchange,\n          market_cap: companyData.marketCapitalization,\n          outstanding_shares: companyData.shareOutstanding,\n          web_url: companyData.weburl,\n          logo: companyData.logo,\n          industry: companyData.finnhubIndustry,\n          current_price: quoteData.c,\n          previous_close_price: quoteData.pc,\n          three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n          fifty_two_week_high: basicData['52WeekHigh'],\n          fifty_two_week_high_date: basicData['52WeekHighDate'],\n          fifty_two_week_low: basicData['52WeekLow'],\n          fifty_two_week_low_date: basicData['52WeekLowDate']\n        },\n        chartData: newChartData\n      };\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(companyDataObject)\n      };\n      fetch('http://localhost:3000/companies', companyObject).then(resp => resp.json()).then(json => {\n        console.log('company database response: ', json);\n        return dispatch({\n          type: 'ADD_COMPANY',\n          payload: json\n        });\n      });\n    };\n  };\n} // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\n\n\nconst readyChartData = chartData => {\n  const newChartData = [];\n  chartData.t.map((date, index) => {\n    return newChartData.push({\n      date: date,\n      open: chartData.o[index],\n      high: chartData.h[index],\n      low: chartData.l[index],\n      close: chartData.c[index]\n    });\n  }); // console.log(newChartData)\n\n  return newChartData;\n}; // Example of chart data format: \n//  newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\n\nexport default fetchCompany;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/fetchCompany.js"],"names":["fetchCompany","formData","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","chartEndDate","finnhubTimeframeUrl","companyData","quoteData","basicData","newChartData","dispatch","type","fetch","ticker","then","resp","json","fetchQuoteData","fetchBasicData","metric","fetchChartData","readyChartData","databaseFetch","companyDataObject","data","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","current_price","c","previous_close_price","pc","three_month_trading_volume","fifty_two_week_high","fifty_two_week_high_date","fifty_two_week_low","fifty_two_week_low_date","chartData","companyObject","method","headers","body","JSON","stringify","console","log","payload","t","map","date","index","push","open","o","high","h","low","l","close"],"mappings":"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","sourcesContent":["function fetchCompany(formData) {\n    \n  debugger\n  // from to in stock data is unix time from 6/1/20 to 6/15/20\n// const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\nconst FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\nconst FINNHUB_QUOTE_URL = '/quote?symbol='\nconst FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\nconst FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\nconst FINNHUB_CHART_URL = '/stock/candle?symbol='\nconst FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\nconst FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\nlet chartStartDate = '1593561600' // July 1, 2020 - need to make this variable\nlet chartEndDate = '1596153600' // July 31, 2020 - need to make this variable\nlet finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\nlet companyData = {}\nlet quoteData = {}\nlet basicData = {}\nlet newChartData = []\n\n    return dispatch => {\n        dispatch({ type: 'START_COMPANY_FETCH'})\n        \n        // Get company, stock, and chart data from API (3 fetches)\n\n        fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY)\n        .then(resp => resp.json())\n        .then(json => {\n            companyData = json\n            return fetchQuoteData()\n        })\n\n        const fetchQuoteData = () => {\n            fetch(FINNHUB_BASIC_URL + FINNHUB_QUOTE_URL + formData.ticker + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                quoteData = json\n                return fetchBasicData()\n            })\n        }\n\n        const fetchBasicData = () => {\n            fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + formData.ticker + '&metric=price' + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                basicData = json.metric\n                return fetchChartData()\n            })\n        }\n\n        const fetchChartData = () => {\n            fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n            .then(resp => resp.json())\n            .then(json => {\n                newChartData = readyChartData(json)\n                return databaseFetch()\n            })\n\n        }\n\n\n        const databaseFetch = () => {\n            // Persist company and chart data to database\n\n            const companyDataObject = {\n                data: {\n                    ticker: companyData.ticker,\n                    name: companyData.name,\n                    country: companyData.country,\n                    exchange: companyData.exchange,\n                    market_cap: companyData.marketCapitalization,\n                    outstanding_shares: companyData.shareOutstanding,\n                    web_url: companyData.weburl,\n                    logo: companyData.logo,\n                    industry: companyData.finnhubIndustry,\n                    current_price: quoteData.c,\n                    previous_close_price: quoteData.pc,\n                    three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n                    fifty_two_week_high: basicData['52WeekHigh'],\n                    fifty_two_week_high_date: basicData['52WeekHighDate'],\n                    fifty_two_week_low: basicData['52WeekLow'],\n                    fifty_two_week_low_date: basicData['52WeekLowDate']\n                },\n                chartData: newChartData\n            }\n        \n            const companyObject = {\n                method: 'POST',\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                body: JSON.stringify(companyDataObject)\n            }\n\n            fetch('http://localhost:3000/companies', companyObject)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('company database response: ', json)\n                return dispatch({type: 'ADD_COMPANY', payload: json})\n            })\n        }\n    }\n}\n\n// Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\nconst readyChartData = (chartData) => {\n    const newChartData = []\n\n    chartData.t.map( (date, index) => {\n        return newChartData.push(\n            {date: date,\n            open: chartData.o[index],\n            high: chartData.h[index],\n            low: chartData.l[index],\n            close: chartData.c[index]\n            }\n        )\n    })\n    // console.log(newChartData)\n    return newChartData\n}\n// Example of chart data format: \n//  newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\nexport default fetchCompany"]},"metadata":{},"sourceType":"module"}