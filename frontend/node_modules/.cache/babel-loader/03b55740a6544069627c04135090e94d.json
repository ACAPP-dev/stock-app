{"ast":null,"code":"var _jsxFileName = \"/Users/acapp5K1/Desktop/stocks-app/frontend/src/components/daily/DailyRows.js\";\nimport React from 'react';\n\nconst DailyRows = props => {\n  console.log('props in dailyrows: ', props);\n\n  const formatNumber = number => {\n    if (!number || Number.isNaN(number)) {\n      return '';\n    }\n\n    const numberArry = parseFloat(number).toFixed(2).split('.');\n    numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    return numberArry.join('.');\n  };\n\n  const findChart = company => {\n    // debugger\n    return company.charts.find(chart => chart.chart_type === 'daily');\n  };\n\n  const getPriceData = chart => {\n    // Return object to use for the price data in the rows\n    const priceReturn = chart.chart_lines.slice(1).map((date, index) => {\n      const prevClose = chart.chart_lines[index].close;\n      return {\n        close: formatNumber(date.close),\n        dollarChg: formatNumber(date.close - prevClose),\n        percentChg: Math.round((date.close / prevClose - 1) * 10000) / 100\n      };\n    });\n    debugger;\n    return priceReturn;\n  };\n\n  return props.watchlist.companies.map(company => {\n    const chart = findChart(company);\n\n    if (chart) {\n      const priceData = getPriceData(chart);\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: company.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }\n      }, company.id), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }\n      }, company.ticker), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }, company.name), chart.chart_lines.map(day => {\n        return /*#__PURE__*/React.createElement(React.Fragment, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }\n        }, day.close), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }\n        }, \"Need $ Change\"), /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }\n        }, \"Need % Change\"));\n      }), /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }\n      }, \"Need total $ Change\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, \"Need total % Change\")));\n    } else {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 26\n        }\n      }, \"Blank Row\");\n    }\n  });\n};\n\nexport default DailyRows;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/components/daily/DailyRows.js"],"names":["React","DailyRows","props","console","log","formatNumber","number","Number","isNaN","numberArry","parseFloat","toFixed","split","replace","join","findChart","company","charts","find","chart","chart_type","getPriceData","priceReturn","chart_lines","slice","map","date","index","prevClose","close","dollarChg","percentChg","Math","round","watchlist","companies","priceData","id","ticker","name","day"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst DailyRows = props => {\n    console.log('props in dailyrows: ', props)\n    \n    const formatNumber = number => {\n        if (!number || Number.isNaN(number)) { return '' }\n        const numberArry = parseFloat(number).toFixed(2).split('.')\n        numberArry[0] = numberArry[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n        return numberArry.join('.')\n    }\n\n    const findChart = company => {\n        // debugger\n        return company.charts.find(chart => chart.chart_type === 'daily')\n    }\n\n    const getPriceData = chart => {\n        // Return object to use for the price data in the rows\n        const priceReturn =  chart.chart_lines.slice(1).map( (date, index) => {\n                \n                const prevClose = chart.chart_lines[index].close\n                return (\n                    {\n                        close: formatNumber(date.close),\n                        dollarChg: formatNumber(date.close - prevClose),\n                        percentChg: Math.round(((date.close / prevClose) - 1) * 10000) / 100\n\n                    }\n                )})\n        debugger\n        return priceReturn\n    }\n\n\n    return props.watchlist.companies.map(company => {\n        const chart = findChart(company)\n        \n        if (chart) {\n            const priceData = getPriceData(chart)\n            return (\n                <tr key={company.id}>\n                    <td>{company.id}</td>\n                    <td>{company.ticker}</td>\n                    <td>{company.name}</td>\n                    {chart.chart_lines.map(day => {\n                        return (\n                            <React.Fragment>\n                            <td>{day.close}</td>\n                            <td>Need $ Change</td>\n                            <td>Need % Change</td>\n                            </React.Fragment>\n                        )\n                    })}\n                    <React.Fragment>\n                    <td>Need total $ Change</td>\n                    <td>Need total % Change</td>\n                    </React.Fragment>\n                </tr>\n\n            )\n            \n        } else { return (<tr>Blank Row</tr>)}\n\n\n    })\n}\n\nexport default DailyRows"]},"metadata":{},"sourceType":"module"}