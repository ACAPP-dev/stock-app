{"ast":null,"code":"function getDailyData(formData, watchlistObj) {\n  console.log('formdata from getDailyData: ', formData); // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.startDate) / 1000).toString();\n  const chartEndDate = (Date.parse(formData.endDate) / 1000).toString();\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  let companyData = {};\n  let quoteData = {};\n  let basicData = {};\n  let newChartData = [];\n  const dailyDataArry = [];\n\n  const readyChartData = chartData => {\n    const newChartData = [];\n    chartData.t.map((date, index) => {\n      return newChartData.push({\n        date: date,\n        open: chartData.o[index],\n        high: chartData.h[index],\n        low: chartData.l[index],\n        close: chartData.c[index]\n      });\n    });\n    return newChartData;\n  };\n\n  return dispatch => {\n    dispatch({\n      type: 'START_GET_DAILY_DATA'\n    });\n    return watchlistObj.companies.map((company, index) => {\n      //    debugger\n      // Get company, stock, and chart data from API (3 fetches)\n      fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + company.ticker + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n        companyData = json;\n        console.log('companydata in getdailydata: ', companyData);\n        return fetchChartData();\n      });\n\n      const fetchChartData = () => {\n        fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + company.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY).then(resp => resp.json()).then(json => {\n          console.log('chart data: ', json);\n          newChartData = readyChartData(json);\n          return makeObj();\n        });\n      };\n\n      const makeObj = () => {\n        const companyDataObject = {\n          data: {\n            ticker: companyData.ticker,\n            name: companyData.name,\n            country: companyData.country,\n            exchange: companyData.exchange,\n            market_cap: companyData.marketCapitalization,\n            outstanding_shares: companyData.shareOutstanding,\n            web_url: companyData.weburl,\n            logo: companyData.logo,\n            industry: companyData.finnhubIndustry\n          },\n          chartStartDate: chartStartDate,\n          chartEndDate: chartEndDate,\n          chartData: newChartData\n        };\n\n        if (index < watchlistObj.companies.length - 1) {\n          return dailyDataArry.push(companyDataObject);\n        } else {\n          dailyDataArry.push(companyDataObject);\n          return databaseFetch();\n        }\n      };\n    });\n\n    const databaseFetch = () => {\n      // Persist company and chart data to database\n      const companyObject = {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify(dailyDataArry)\n      };\n      fetch('http://localhost:3000/daily', companyObject).then(resp => resp.json()).then(json => {\n        console.log('add daily data database response: ', json);\n        return dispatch({\n          type: 'ADD_DAILY_DATA',\n          payload: json\n        });\n      });\n    };\n  };\n}\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","watchlistObj","console","log","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","startDate","toString","chartEndDate","endDate","finnhubTimeframeUrl","companyData","quoteData","basicData","newChartData","dailyDataArry","readyChartData","chartData","t","map","date","index","push","open","o","high","h","low","l","close","c","dispatch","type","companies","company","fetch","ticker","then","resp","json","fetchChartData","makeObj","companyDataObject","data","name","country","exchange","market_cap","marketCapitalization","outstanding_shares","shareOutstanding","web_url","weburl","logo","industry","finnhubIndustry","length","databaseFetch","companyObject","method","headers","body","JSON","stringify","payload"],"mappings":"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","sourcesContent":["function getDailyData(formData, watchlistObj) {\n    console.log('formdata from getDailyData: ', formData)\n  \n      // !!!Need to iterate through watchlistObj.companies for company fetches...\n\n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_QUOTE_URL = '/quote?symbol='\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.startDate)/1000).toString()\n    const chartEndDate = (Date.parse(formData.endDate)/1000).toString()\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n    let companyData = {}\n    let quoteData = {}\n    let basicData = {}\n    let newChartData = []\n    \n    const dailyDataArry = []\n\n    \n\n    const readyChartData = (chartData) => {\n        const newChartData = []\n    \n        chartData.t.map( (date, index) => {\n            return newChartData.push(\n                {date: date,\n                open: chartData.o[index],\n                high: chartData.h[index],\n                low: chartData.l[index],\n                close: chartData.c[index]\n                }\n            )\n        })\n        return newChartData\n    }\n\n    return dispatch => {\n        dispatch({ type: 'START_GET_DAILY_DATA'})\n        \n\n        return watchlistObj.companies.map((company, index) => {\n        //    debugger\n            // Get company, stock, and chart data from API (3 fetches)\n    \n                fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + company.ticker + FINNHUB_API_KEY)\n                .then(resp => resp.json())\n                .then(json => {\n                    companyData = json\n                    console.log('companydata in getdailydata: ', companyData)\n                    return fetchChartData()\n                })\n\n                const fetchChartData = () => {\n                    fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + company.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n                    .then(resp => resp.json())\n                    .then(json => {\n                        console.log('chart data: ', json)\n                        newChartData = readyChartData(json)\n                        return makeObj()\n                    })\n                }\n        \n                const makeObj = () => {\n                    const companyDataObject = {\n                        data: {\n                            ticker: companyData.ticker,\n                            name: companyData.name,\n                            country: companyData.country,\n                            exchange: companyData.exchange,\n                            market_cap: companyData.marketCapitalization,\n                            outstanding_shares: companyData.shareOutstanding,\n                            web_url: companyData.weburl,\n                            logo: companyData.logo,\n                            industry: companyData.finnhubIndustry\n                            },\n                        chartStartDate: chartStartDate,\n                        chartEndDate: chartEndDate,\n                        chartData: newChartData\n                    }\n                    if (index < watchlistObj.companies.length-1) {\n                        return dailyDataArry.push(companyDataObject)\n                    } else {\n                        dailyDataArry.push(companyDataObject)\n                        return databaseFetch()\n                    }\n                }\n        })\n\n        const databaseFetch = () => {\n            // Persist company and chart data to database\n\n            const companyObject = {\n                method: 'POST',\n                headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n                body: JSON.stringify(dailyDataArry)\n            }\n\n            fetch('http://localhost:3000/daily', companyObject)\n            .then(resp => resp.json())\n            .then(json => {\n                console.log('add daily data database response: ', json)\n                return dispatch({type: 'ADD_DAILY_DATA', payload: json})\n            })\n        }\n    }\n\n}\n    export default getDailyData"]},"metadata":{},"sourceType":"module"}