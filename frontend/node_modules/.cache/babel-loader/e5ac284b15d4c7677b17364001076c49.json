{"ast":null,"code":"function getDailyData(formData) {\n  debugger; // from to in stock data is unix time from 6/1/20 to 6/15/20\n  // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n\n  const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1';\n  const FINNHUB_QUOTE_URL = '/quote?symbol=';\n  const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol=';\n  const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol=';\n  const FINNHUB_CHART_URL = '/stock/candle?symbol=';\n  const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from=';\n  const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80';\n  const chartStartDate = (Date.parse(formData.startDate) / 1000).toString(); // 1593561600000\n  // 1593561600\n  // Test Date: '1593561600' // July 1, 2020 - need to make this variable\n\n  const chartEndDate = (Date.parse(formData.endDate) / 1000).toString(); // Test Date: '1596153600' // July 31, 2020 - need to make this variable\n\n  let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate;\n  let companyData = {};\n  let quoteData = {};\n  let basicData = {};\n  let newChartData = []; // return dispatch => {\n  //     dispatch({ type: 'START_COMPANY_FETCH'})\n  //     // Get company, stock, and chart data from API (3 fetches)\n  //     fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY)\n  //     .then(resp => resp.json())\n  //     .then(json => {\n  //         companyData = json\n  //         return fetchQuoteData()\n  //     })\n  //     const fetchQuoteData = () => {\n  //         fetch(FINNHUB_BASIC_URL + FINNHUB_QUOTE_URL + formData.ticker + FINNHUB_API_KEY)\n  //         .then(resp => resp.json())\n  //         .then(json => {\n  //             quoteData = json\n  //             return fetchBasicData()\n  //         })\n  //     }\n  //     const fetchBasicData = () => {\n  //         fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + formData.ticker + '&metric=price' + FINNHUB_API_KEY)\n  //         .then(resp => resp.json())\n  //         .then(json => {\n  //             basicData = json.metric\n  //             return fetchChartData()\n  //         })\n  //     }\n  //     const fetchChartData = () => {\n  //         fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n  //         .then(resp => resp.json())\n  //         .then(json => {\n  //             console.log('chart data: ', json)\n  //             newChartData = readyChartData(json)\n  //             return databaseFetch()\n  //         })\n  //     }\n  //     const databaseFetch = () => {\n  //         // Persist company and chart data to database\n  //         const companyDataObject = {\n  //             data: {\n  //                 ticker: companyData.ticker,\n  //                 name: companyData.name,\n  //                 country: companyData.country,\n  //                 exchange: companyData.exchange,\n  //                 market_cap: companyData.marketCapitalization,\n  //                 outstanding_shares: companyData.shareOutstanding,\n  //                 web_url: companyData.weburl,\n  //                 logo: companyData.logo,\n  //                 industry: companyData.finnhubIndustry,\n  //                 current_price: quoteData.c,\n  //                 previous_close_price: quoteData.pc,\n  //                 three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n  //                 fifty_two_week_high: basicData['52WeekHigh'],\n  //                 fifty_two_week_high_date: basicData['52WeekHighDate'],\n  //                 fifty_two_week_low: basicData['52WeekLow'],\n  //                 fifty_two_week_low_date: basicData['52WeekLowDate']\n  //             },\n  //             chartStartDate: chartStartDate,\n  //             chartEndDate: chartEndDate,\n  //             chartData: newChartData\n  //         }\n  //         const companyObject = {\n  //             method: 'POST',\n  //             headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n  //             body: JSON.stringify(companyDataObject)\n  //         }\n  //         fetch('http://localhost:3000/companies', companyObject)\n  //         .then(resp => resp.json())\n  //         .then(json => {\n  //             console.log('company database response: ', json)\n  //             return dispatch({type: 'ADD_COMPANY', payload: json})\n  //         })\n  //     }\n  // }\n} // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n// Add volume to model later?\n\n\nconst readyChartData = chartData => {\n  const newChartData = [];\n  chartData.t.map((date, index) => {\n    return newChartData.push({\n      date: date,\n      open: chartData.o[index],\n      high: chartData.h[index],\n      low: chartData.l[index],\n      close: chartData.c[index]\n    });\n  }); // console.log(newChartData)\n\n  return newChartData;\n}; // Example of chart data format: \n//  newChart.data = [ {\n//     \"date\": \"2018-08-01\",\n//     \"open\": \"136.65\",\n//     \"high\": \"136.96\",\n//     \"low\": \"134.15\",\n//     \"close\": \"136.49\"\n//   },\n\n\nexport default getDailyData;","map":{"version":3,"sources":["/Users/acapp5K1/Desktop/stocks-app/frontend/src/actions/getDailyData.js"],"names":["getDailyData","formData","FINNHUB_BASIC_URL","FINNHUB_QUOTE_URL","FINNHUB_COMPANY_DATA_URL","FINNHUB_BASIC_DATA_URL","FINNHUB_CHART_URL","FINNHUB_CHART_TIMEFRAME","FINNHUB_API_KEY","chartStartDate","Date","parse","startDate","toString","chartEndDate","endDate","finnhubTimeframeUrl","companyData","quoteData","basicData","newChartData","readyChartData","chartData","t","map","date","index","push","open","o","high","h","low","l","close","c"],"mappings":"AAAA,SAASA,YAAT,CAAsBC,QAAtB,EAAgC;AAE1B,WAF0B,CAG1B;AACF;;AACA,QAAMC,iBAAiB,GAAG,2BAA1B;AACA,QAAMC,iBAAiB,GAAG,gBAA1B;AACA,QAAMC,wBAAwB,GAAG,yBAAjC;AACA,QAAMC,sBAAsB,GAAG,uBAA/B;AACA,QAAMC,iBAAiB,GAAG,uBAA1B;AACA,QAAMC,uBAAuB,GAAG,qBAAhC;AACA,QAAMC,eAAe,GAAG,6BAAxB;AACA,QAAMC,cAAc,GAAG,CAACC,IAAI,CAACC,KAAL,CAAWV,QAAQ,CAACW,SAApB,IAA+B,IAAhC,EAAsCC,QAAtC,EAAvB,CAZ4B,CAc5B;AACA;AACA;;AACA,QAAMC,YAAY,GAAG,CAACJ,IAAI,CAACC,KAAL,CAAWV,QAAQ,CAACc,OAApB,IAA6B,IAA9B,EAAoCF,QAApC,EAArB,CAjB4B,CAkB5B;;AACA,MAAIG,mBAAmB,GAAGT,uBAAuB,GAAGE,cAA1B,GAA2C,MAA3C,GAAoDK,YAA9E;AACA,MAAIG,WAAW,GAAG,EAAlB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,YAAY,GAAG,EAAnB,CAvB4B,CAyBxB;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,C,CAED;AACA;;;AACA,MAAMC,cAAc,GAAIC,SAAD,IAAe;AAClC,QAAMF,YAAY,GAAG,EAArB;AAEAE,EAAAA,SAAS,CAACC,CAAV,CAAYC,GAAZ,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9B,WAAON,YAAY,CAACO,IAAb,CACH;AAACF,MAAAA,IAAI,EAAEA,IAAP;AACAG,MAAAA,IAAI,EAAEN,SAAS,CAACO,CAAV,CAAYH,KAAZ,CADN;AAEAI,MAAAA,IAAI,EAAER,SAAS,CAACS,CAAV,CAAYL,KAAZ,CAFN;AAGAM,MAAAA,GAAG,EAAEV,SAAS,CAACW,CAAV,CAAYP,KAAZ,CAHL;AAIAQ,MAAAA,KAAK,EAAEZ,SAAS,CAACa,CAAV,CAAYT,KAAZ;AAJP,KADG,CAAP;AAQH,GATD,EAHkC,CAalC;;AACA,SAAON,YAAP;AACH,CAfD,C,CAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAepB,YAAf","sourcesContent":["function getDailyData(formData) {\n    \n      debugger\n      // from to in stock data is unix time from 6/1/20 to 6/15/20\n    // const FINNHUB_STOCK_DATA_URL = 'https://finnhub.io/api/v1/stock/candle?symbol=AAPL&resolution=D&from=1590969600&to=1592179200&token=bsfleivrh5rf14r5rh80'\n    const FINNHUB_BASIC_URL = 'https://finnhub.io/api/v1'\n    const FINNHUB_QUOTE_URL = '/quote?symbol='\n    const FINNHUB_COMPANY_DATA_URL = '/stock/profile2?symbol='\n    const FINNHUB_BASIC_DATA_URL = '/stock/metric?symbol='\n    const FINNHUB_CHART_URL = '/stock/candle?symbol='\n    const FINNHUB_CHART_TIMEFRAME = '&resolution=D&from='\n    const FINNHUB_API_KEY = '&token=bsfleivrh5rf14r5rh80'\n    const chartStartDate = (Date.parse(formData.startDate)/1000).toString()\n    \n    // 1593561600000\n    // 1593561600\n    // Test Date: '1593561600' // July 1, 2020 - need to make this variable\n    const chartEndDate = (Date.parse(formData.endDate)/1000).toString()\n    // Test Date: '1596153600' // July 31, 2020 - need to make this variable\n    let finnhubTimeframeUrl = FINNHUB_CHART_TIMEFRAME + chartStartDate + '&to=' + chartEndDate\n    let companyData = {}\n    let quoteData = {}\n    let basicData = {}\n    let newChartData = []\n    \n        // return dispatch => {\n        //     dispatch({ type: 'START_COMPANY_FETCH'})\n            \n        //     // Get company, stock, and chart data from API (3 fetches)\n    \n        //     fetch(FINNHUB_BASIC_URL + FINNHUB_COMPANY_DATA_URL + formData.ticker + FINNHUB_API_KEY)\n        //     .then(resp => resp.json())\n        //     .then(json => {\n        //         companyData = json\n        //         return fetchQuoteData()\n        //     })\n    \n        //     const fetchQuoteData = () => {\n        //         fetch(FINNHUB_BASIC_URL + FINNHUB_QUOTE_URL + formData.ticker + FINNHUB_API_KEY)\n        //         .then(resp => resp.json())\n        //         .then(json => {\n        //             quoteData = json\n        //             return fetchBasicData()\n        //         })\n        //     }\n    \n        //     const fetchBasicData = () => {\n        //         fetch(FINNHUB_BASIC_URL + FINNHUB_BASIC_DATA_URL + formData.ticker + '&metric=price' + FINNHUB_API_KEY)\n        //         .then(resp => resp.json())\n        //         .then(json => {\n        //             basicData = json.metric\n        //             return fetchChartData()\n        //         })\n        //     }\n    \n        //     const fetchChartData = () => {\n        //         fetch(FINNHUB_BASIC_URL + FINNHUB_CHART_URL + formData.ticker + finnhubTimeframeUrl + FINNHUB_API_KEY)\n        //         .then(resp => resp.json())\n        //         .then(json => {\n        //             console.log('chart data: ', json)\n        //             newChartData = readyChartData(json)\n        //             return databaseFetch()\n        //         })\n    \n        //     }\n    \n    \n        //     const databaseFetch = () => {\n        //         // Persist company and chart data to database\n    \n        //         const companyDataObject = {\n        //             data: {\n        //                 ticker: companyData.ticker,\n        //                 name: companyData.name,\n        //                 country: companyData.country,\n        //                 exchange: companyData.exchange,\n        //                 market_cap: companyData.marketCapitalization,\n        //                 outstanding_shares: companyData.shareOutstanding,\n        //                 web_url: companyData.weburl,\n        //                 logo: companyData.logo,\n        //                 industry: companyData.finnhubIndustry,\n        //                 current_price: quoteData.c,\n        //                 previous_close_price: quoteData.pc,\n        //                 three_month_trading_volume: basicData['3MonthAverageTradingVolume'],\n        //                 fifty_two_week_high: basicData['52WeekHigh'],\n        //                 fifty_two_week_high_date: basicData['52WeekHighDate'],\n        //                 fifty_two_week_low: basicData['52WeekLow'],\n        //                 fifty_two_week_low_date: basicData['52WeekLowDate']\n        //             },\n        //             chartStartDate: chartStartDate,\n        //             chartEndDate: chartEndDate,\n        //             chartData: newChartData\n        //         }\n            \n        //         const companyObject = {\n        //             method: 'POST',\n        //             headers: {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\"},\n        //             body: JSON.stringify(companyDataObject)\n        //         }\n    \n        //         fetch('http://localhost:3000/companies', companyObject)\n        //         .then(resp => resp.json())\n        //         .then(json => {\n        //             console.log('company database response: ', json)\n        //             return dispatch({type: 'ADD_COMPANY', payload: json})\n        //         })\n        //     }\n        // }\n    }\n    \n    // Convert chart data from API fetch to a format that can persist to the database and work with the chart library\n    // Add volume to model later?\n    const readyChartData = (chartData) => {\n        const newChartData = []\n    \n        chartData.t.map( (date, index) => {\n            return newChartData.push(\n                {date: date,\n                open: chartData.o[index],\n                high: chartData.h[index],\n                low: chartData.l[index],\n                close: chartData.c[index]\n                }\n            )\n        })\n        // console.log(newChartData)\n        return newChartData\n    }\n    // Example of chart data format: \n    //  newChart.data = [ {\n    //     \"date\": \"2018-08-01\",\n    //     \"open\": \"136.65\",\n    //     \"high\": \"136.96\",\n    //     \"low\": \"134.15\",\n    //     \"close\": \"136.49\"\n    //   },\n    \n    export default getDailyData"]},"metadata":{},"sourceType":"module"}